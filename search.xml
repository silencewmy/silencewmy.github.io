<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[java IO使用]]></title>
    <url>%2F2018%2F09%2F07%2Fjava-IO%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[总述我们需要将数据从一端接收到另一端来使用，宏观上说我们需要的要么是一些数字啊文本啊来进行我们预期的处理，这些数据要么是存放在硬盘中（文件），要么是我们从键盘获取，但都是要交给程序来使用。这其中有两个问题： 从哪里拿（写到哪里）。&emsp;理想的就是有一个地方，我们要接收就从这个地方获取，要输送就将数据写进这个地方中，多么方便，这个地方就是流。 如何去拿（按照什么方式去写）。 &emsp;解决了 从哪里 的问题，就要说我们如何去获取，也就是按照什么方式去接收或者发送这些数据。比如说我们要按照字符串接受，或者我们要以整形的形式来接收等等。这都是我们要使用的方式。这里涉及到后面的装饰器模式。 你应该知道: 文件的读写一般需要两次数据复制,第一次是将数据从硬盘复制到 打开文件：会在操作系统的内核中建立一个内存结构，该内存结构消耗内存，因此可以同时打开的内存有限。 关闭文件：同步缓冲区内容到硬盘并释放内存结构。 流使用同一种概念来处理所有IO，屏蔽不同。换一中方式理解，流就是一个通道，里面装着数据流，从源端到接受端。数据流有字节流和字符流之分，不同就是每次读或者写的单位不同。 #####装饰器模式通过叠合多个对象来提供所期望的功能。功能可以理解成按照何种方式换句话说就是对基本的流增加功能，但是每一个增加功能的类只注重一个方面。如下： 字节流 以InputStream OutputStream 作为基类 有增加缓冲功能的： Buffered(Input / Output)Stream 规格化为按照基本类型或者String来处理：Data(Input / Output)Stream 将基本类型，对象按照字符串输出：PrintStream 字符流 以Writer Reader 作为基类 读写文件的：File(Reader/Writer) 带有缓冲的：Buffered(Reader/Writer)]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git命令记录]]></title>
    <url>%2F2018%2F09%2F05%2Fgit%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[git入门命令 什么是Git，GitHub？ &nbsp;&nbsp;&nbsp;&nbsp;纯属个人理解，如有雷到，见谅见谅。。。。&nbsp;&nbsp;&nbsp;&nbsp;说的通俗一点，GitHub就是一个来存放文本文件的地方（类比网盘），它是远程服务器我们的电脑是客户端。两个地方是不是的同步一下数据来保证我们两个地方保存的东西都一样。既然如此我们就直接使用平时的网盘来保存我们的代码何必使用git或者github呢。因为它有版本控制功能，它记录了我们对文本文件的操作流水账，比如：加了哪些东西，在那些个文件中加的，在哪里做了修改等等，我们可以把不同的操作结果叫做不同的版本，每个版本有自己的版本号，我们可以在版本号列表中选择恢复到任何记录在案的版本。 刚刚下载安装git后需要设置连接用户：12git config --global user.namegit config --golbal user.email 创建版本库，即使之可以被版本管理： git init //初始化，git可管理 往简单说只需三步你就可以将本地库同步到远程：1231. git add //此命令表示将更改提交到暂存区2. git commit -m &quot;此次提交的说明性文字&quot; //表示将更改提交到仓库3. git push //此命令为省略，只是来表示为push命令，新手切勿直接使用，将本地提交到远程 到此会有疑问，什么暂存区什么仓库，如下说明：工作区：就是你在电脑上看到的目录。版本库：就是该目录下的 .git目录，在不懂的情况下不要随意改动。暂存区： 暂存区存放与版本库中，即在 .git目录中。补充：.git 中也存放着默认创建的master分支，和指向master的指针HEAD。 git status——查看有什么被修改：用来显示工作目录和暂存区的状态，不显示已经提交(git commit)到历史中的信息 git status //闲着没事就 git status 一下 你会看到有三类（个人理解）：1.Changes to be committed : 所有的都准备好了，可以被 git commit 了。2.Changes not staged for commit: 你修改过文件，需要git add一下。&ensp;&ensp;&ensp;&ensp;&ensp;就像是：喂，我知道你做过修改，过来给我报备一下，我要记录在案3.Untracked files: 表示这些文件好没有被版本库记录，如果要记录，你需要git add一下。 git diff + 文件名查看该文件做了什么修改。 本人没用过，不太会。。。 版本管理命令：1234567git log //按时间的由近到远的显示提交记录git reset -hard HEAD^ //恢复到上一个版本git reset -hard HEAD~N //恢复到上N个版本git reflog //显示每次提交的版本号（为一串数字，唯一存在） 查看你的本地仓库与远程库的关系：12git remotegit remote -vv 查看本地分支的追踪关系：1git branch -vv //查看本地分支与哪些分支存在追踪关系 创建并切换分支：git checkout -b 新分支的名字 //代表创建分支并切换到该分支该命令相当于git branch 新分支名字git checkout 新分支名字 与分支有关的命令： 查看有哪些分支： git branch 删除分支：git branch -d 分支名 合并分支：git merge 分支 //将指定分支合并到当前分支，一般搭配--no-ff 参数来使用 结果是禁用fast forward还有一点就是会保存下被删除分支的版本号信息，方便来恢复 参考地址：https://www.yiibai.com/git/]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown学习]]></title>
    <url>%2F2018%2F08%2F25%2Fmarkdown%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[简单轻量级的标记语法 基本用法：单个回车表示空格 连续回车表示分段 行尾加两个空格表示段内换行 可以使用HTML标签 标题使用 #每一个#代表以及标题 最多支持6级标题 例如例如例如列表使用无序列表使用（ ，+，-） 列表使用：（ ，+，-）中选一个加一个空格例如： 列表 类表 列表 列表3 列表 有序列表数字加点号再空格 音乐 数据 #嵌套 文字格式**粗体** __粗体__ 斜体*斜体* _斜体_ 删除线链接链接语法为 [你显示的](网址) 百度 将网址放在尖括号内，即网址原样生成。例如： &lt;https://silencewmy.github.io/&gt; https://silencewmy.github.io/ 图片语法： ！[替代文本]（链接地址 &quot;&quot;） 引用 一级引用 二级引用 三级引用 目录在要生成目录的地方写 [TOC]或者[toc]，同时大写或小写。 水平分割线一串‘-’或者‘*’ 表格表头 | 表头 | 表头 :-----| -------:|:-----: 内容 | 内容 | 内容 :– 左对齐，–: 表示右对齐， :–: 居中 效果图： 表头 表头 表头 内容 内容 内容 内容 内容 内容 #文档头规范 title：文章标题 date：文章创建时间 categoties：分类 tags： 标签 toc： true or false 是否显示目录需要 top：填数字，和优先级差不多意思 description：文章摘要 comments：是否允许评论 keywords：文章关键字]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
